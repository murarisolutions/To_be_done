{"ast":null,"code":"// import React from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { useFormik } from 'formik';\n// import * as Yup from 'yup';\n// import { gql, useMutation } from '@apollo/client';  // Import Apollo Client\n// import '../../services/Consulting/consulting.css';\n\n// // GraphQL mutation for form submission\n// const SUBMIT_ENROLLMENT = gql`\n//   mutation SubmitEnrollment($name: String!, $email: String!, $phone: String!, $message: String!) {\n//     submitEnrollment(name: $name, email: $email, phone: $phone, message: $message)\n//   }\n// `;\n\n// const ConsultingPage = () => {\n//   const navigate = useNavigate();\n\n//   // Initialize the mutation using Apollo's useMutation hook\n//   const [submitEnrollment, { loading, error, data }] = useMutation(SUBMIT_ENROLLMENT);\n\n//   const formik = useFormik({\n//     initialValues: {\n//       name: '',\n//       email: '',\n//       phone: '',\n//       message: '',\n//     },\n//     validationSchema: Yup.object({\n//       name: Yup.string()\n//         .matches(/^[a-zA-Z\\s]{2,50}$/, 'Please enter a valid name (2-50 characters, letters only).')\n//         .required('Name is required'),\n//       email: Yup.string()\n//         .email('Invalid email address')\n//         .required('Email is required'),\n//       phone: Yup.string()\n//         .matches(/^\\d{10}$/, 'Please enter a valid 10-digit phone number.')\n//         .required('Phone number is required'),\n//       message: Yup.string()\n//         .min(10, 'Message should be at least 10 characters long and provide meaningful content.')\n//         .required('Message is required'),\n//     }),\n//     onSubmit: async (values, { setSubmitting, setErrors, resetForm }) => {\n//       try {\n//         // Call the GraphQL mutation when form is submitted\n//         const response = await submitEnrollment({\n//           variables: {\n//             name: values.name,\n//             email: values.email,\n//             phone: values.phone,\n//             message: values.message,\n//           },\n//         });\n\n//         console.log(response.data.submitEnrollment);  // Handle the success response\n//         resetForm();  // Reset the form after successful submission\n//       } catch (err) {\n//         setErrors({ submit: 'Failed to send the form. Please try again.' });  // Handle errors\n//       } finally {\n//         setSubmitting(false);  // End form submission state\n//       }\n//     },\n//   });\n\n//   return (\n//     <div className=\"consulting-page\">\n//       <header className=\"consulting-header\">\n//         <h1>Consulting Services</h1>\n//       </header>\n//       <main className=\"consulting-content\">\n//         <div className=\"consulting-main\">\n//           <div className=\"consulting-info\">\n//             <div className=\"consulting-text\">\n//               {/* Your text content here */}\n//               <h3>\n//                 Enroll or contact us today to schedule a consultation and take the first step towards optimizing your business.\n//               </h3>\n//             </div>\n//           </div>\n//           <div className=\"phone-frame\">\n//             <div className=\"phone-screen\">\n//               <div className=\"contact-form\">\n//                 <h2>Enroll Now</h2>\n//                 <form onSubmit={formik.handleSubmit}>\n//                   <label>\n//                     Name:\n//                     <input\n//                       type=\"text\"\n//                       name=\"name\"\n//                       value={formik.values.name}\n//                       onChange={formik.handleChange}\n//                       onBlur={formik.handleBlur}\n//                       required\n//                     />\n//                     {formik.touched.name && formik.errors.name ? (\n//                       <div className=\"error-message\">{formik.errors.name}</div>\n//                     ) : null}\n//                   </label>\n//                   <label>\n//                     Email:\n//                     <input\n//                       type=\"email\"\n//                       name=\"email\"\n//                       value={formik.values.email}\n//                       onChange={formik.handleChange}\n//                       onBlur={formik.handleBlur}\n//                       required\n//                     />\n//                     {formik.touched.email && formik.errors.email ? (\n//                       <div className=\"error-message\">{formik.errors.email}</div>\n//                     ) : null}\n//                   </label>\n//                   <label>\n//                     Phone:\n//                     <input\n//                       type=\"tel\"\n//                       name=\"phone\"\n//                       value={formik.values.phone}\n//                       onChange={formik.handleChange}\n//                       onBlur={formik.handleBlur}\n//                       required\n//                     />\n//                     {formik.touched.phone && formik.errors.phone ? (\n//                       <div className=\"error-message\">{formik.errors.phone}</div>\n//                     ) : null}\n//                   </label>\n//                   <label>\n//                     Message:\n//                     <textarea\n//                       name=\"message\"\n//                       value={formik.values.message}\n//                       onChange={formik.handleChange}\n//                       onBlur={formik.handleBlur}\n//                       required\n//                     />\n//                     {formik.touched.message && formik.errors.message ? (\n//                       <div className=\"error-message\">{formik.errors.message}</div>\n//                     ) : null}\n//                   </label>\n//                   <button type=\"submit\" className=\"submit-btn\" disabled={formik.isSubmitting || loading}>\n//                     {loading ? <div className=\"loading-spinner\"></div> : 'Submit'}\n//                   </button>\n//                 </form>\n//                 {formik.errors.submit && <p className=\"error-message\">{formik.errors.submit}</p>}\n//                 {error && <p className=\"error-message\">Error: {error.message}</p>}\n//                 {data && <p className=\"success-message\">{data.submitEnrollment}</p>}\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </main>\n//       <div className=\"advisor\">\n//         <button onClick={() => navigate('/accounting-services')} className=\"back-btn\">Go back</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ConsultingPage;","map":{"version":3,"names":[],"sources":["C:/Users/hp/Desktop/MURARI SOLUTIONS/main/frontend/src/components/services/Consulting/Consulting.jsx"],"sourcesContent":["// import React from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { useFormik } from 'formik';\r\n// import * as Yup from 'yup';\r\n// import { gql, useMutation } from '@apollo/client';  // Import Apollo Client\r\n// import '../../services/Consulting/consulting.css';\r\n\r\n// // GraphQL mutation for form submission\r\n// const SUBMIT_ENROLLMENT = gql`\r\n//   mutation SubmitEnrollment($name: String!, $email: String!, $phone: String!, $message: String!) {\r\n//     submitEnrollment(name: $name, email: $email, phone: $phone, message: $message)\r\n//   }\r\n// `;\r\n\r\n// const ConsultingPage = () => {\r\n//   const navigate = useNavigate();\r\n\r\n//   // Initialize the mutation using Apollo's useMutation hook\r\n//   const [submitEnrollment, { loading, error, data }] = useMutation(SUBMIT_ENROLLMENT);\r\n\r\n//   const formik = useFormik({\r\n//     initialValues: {\r\n//       name: '',\r\n//       email: '',\r\n//       phone: '',\r\n//       message: '',\r\n//     },\r\n//     validationSchema: Yup.object({\r\n//       name: Yup.string()\r\n//         .matches(/^[a-zA-Z\\s]{2,50}$/, 'Please enter a valid name (2-50 characters, letters only).')\r\n//         .required('Name is required'),\r\n//       email: Yup.string()\r\n//         .email('Invalid email address')\r\n//         .required('Email is required'),\r\n//       phone: Yup.string()\r\n//         .matches(/^\\d{10}$/, 'Please enter a valid 10-digit phone number.')\r\n//         .required('Phone number is required'),\r\n//       message: Yup.string()\r\n//         .min(10, 'Message should be at least 10 characters long and provide meaningful content.')\r\n//         .required('Message is required'),\r\n//     }),\r\n//     onSubmit: async (values, { setSubmitting, setErrors, resetForm }) => {\r\n//       try {\r\n//         // Call the GraphQL mutation when form is submitted\r\n//         const response = await submitEnrollment({\r\n//           variables: {\r\n//             name: values.name,\r\n//             email: values.email,\r\n//             phone: values.phone,\r\n//             message: values.message,\r\n//           },\r\n//         });\r\n\r\n//         console.log(response.data.submitEnrollment);  // Handle the success response\r\n//         resetForm();  // Reset the form after successful submission\r\n//       } catch (err) {\r\n//         setErrors({ submit: 'Failed to send the form. Please try again.' });  // Handle errors\r\n//       } finally {\r\n//         setSubmitting(false);  // End form submission state\r\n//       }\r\n//     },\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"consulting-page\">\r\n//       <header className=\"consulting-header\">\r\n//         <h1>Consulting Services</h1>\r\n//       </header>\r\n//       <main className=\"consulting-content\">\r\n//         <div className=\"consulting-main\">\r\n//           <div className=\"consulting-info\">\r\n//             <div className=\"consulting-text\">\r\n//               {/* Your text content here */}\r\n//               <h3>\r\n//                 Enroll or contact us today to schedule a consultation and take the first step towards optimizing your business.\r\n//               </h3>\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"phone-frame\">\r\n//             <div className=\"phone-screen\">\r\n//               <div className=\"contact-form\">\r\n//                 <h2>Enroll Now</h2>\r\n//                 <form onSubmit={formik.handleSubmit}>\r\n//                   <label>\r\n//                     Name:\r\n//                     <input\r\n//                       type=\"text\"\r\n//                       name=\"name\"\r\n//                       value={formik.values.name}\r\n//                       onChange={formik.handleChange}\r\n//                       onBlur={formik.handleBlur}\r\n//                       required\r\n//                     />\r\n//                     {formik.touched.name && formik.errors.name ? (\r\n//                       <div className=\"error-message\">{formik.errors.name}</div>\r\n//                     ) : null}\r\n//                   </label>\r\n//                   <label>\r\n//                     Email:\r\n//                     <input\r\n//                       type=\"email\"\r\n//                       name=\"email\"\r\n//                       value={formik.values.email}\r\n//                       onChange={formik.handleChange}\r\n//                       onBlur={formik.handleBlur}\r\n//                       required\r\n//                     />\r\n//                     {formik.touched.email && formik.errors.email ? (\r\n//                       <div className=\"error-message\">{formik.errors.email}</div>\r\n//                     ) : null}\r\n//                   </label>\r\n//                   <label>\r\n//                     Phone:\r\n//                     <input\r\n//                       type=\"tel\"\r\n//                       name=\"phone\"\r\n//                       value={formik.values.phone}\r\n//                       onChange={formik.handleChange}\r\n//                       onBlur={formik.handleBlur}\r\n//                       required\r\n//                     />\r\n//                     {formik.touched.phone && formik.errors.phone ? (\r\n//                       <div className=\"error-message\">{formik.errors.phone}</div>\r\n//                     ) : null}\r\n//                   </label>\r\n//                   <label>\r\n//                     Message:\r\n//                     <textarea\r\n//                       name=\"message\"\r\n//                       value={formik.values.message}\r\n//                       onChange={formik.handleChange}\r\n//                       onBlur={formik.handleBlur}\r\n//                       required\r\n//                     />\r\n//                     {formik.touched.message && formik.errors.message ? (\r\n//                       <div className=\"error-message\">{formik.errors.message}</div>\r\n//                     ) : null}\r\n//                   </label>\r\n//                   <button type=\"submit\" className=\"submit-btn\" disabled={formik.isSubmitting || loading}>\r\n//                     {loading ? <div className=\"loading-spinner\"></div> : 'Submit'}\r\n//                   </button>\r\n//                 </form>\r\n//                 {formik.errors.submit && <p className=\"error-message\">{formik.errors.submit}</p>}\r\n//                 {error && <p className=\"error-message\">Error: {error.message}</p>}\r\n//                 {data && <p className=\"success-message\">{data.submitEnrollment}</p>}\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </main>\r\n//       <div className=\"advisor\">\r\n//         <button onClick={() => navigate('/accounting-services')} className=\"back-btn\">Go back</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ConsultingPage;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}